"use strict";(self.webpackChunkjitterphysics=self.webpackChunkjitterphysics||[]).push([[108],{7991:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>d,frontMatter:()=>o,metadata:()=>a,toc:()=>c});var i=n(4848),r=n(8453);const o={sidebar_position:2},s="Hull Sampling",a={id:"quickstart/teapots/hull-sampling",title:"Hull Sampling",description:"The teapot is a concave shape, which we will approximate using its convex hull (Wikipedia). As a first step, we will reduce the number of vertices used to construct the convex hull.",source:"@site/docs/01_quickstart/02_teapots/02-hull-sampling.md",sourceDirName:"01_quickstart/02_teapots",slug:"/quickstart/teapots/hull-sampling",permalink:"/docs/quickstart/teapots/hull-sampling",draft:!1,unlisted:!1,editUrl:"https://github.com/notgiven688/jitterphysics2/tree/main/docs/docs/01_quickstart/02_teapots/02-hull-sampling.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Project Setup",permalink:"/docs/quickstart/teapots/project-setup"},next:{title:"Hello World",permalink:"/docs/quickstart/teapots/pointcloudshape"}},l={},c=[];function h(e){const t={a:"a",admonition:"admonition",code:"code",h1:"h1",header:"header",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.header,{children:(0,i.jsx)(t.h1,{id:"hull-sampling",children:"Hull Sampling"})}),"\n",(0,i.jsxs)(t.p,{children:["The teapot is a concave shape, which we will approximate using its convex hull (",(0,i.jsx)(t.a,{href:"https://en.wikipedia.org/wiki/Convex_hull",children:"Wikipedia"}),"). As a first step, we will reduce the number of vertices used to construct the convex hull."]}),"\n",(0,i.jsxs)(t.admonition,{title:"Sampling",type:"info",children:[(0,i.jsx)(t.p,{children:"We could work with the entire set of vertices, but this comes with two main disadvantages:"}),(0,i.jsxs)(t.ol,{children:["\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsx)(t.p,{children:"The set may include vertices that lie inside the hull. While these do not affect the simulation outcome, they are still briefly considered during collision detection in each frame."}),"\n"]}),"\n",(0,i.jsxs)(t.li,{children:["\n",(0,i.jsx)(t.p,{children:"We typically don\u2019t need an exact convex hull. Omitting a few vertices often has little effect on accuracy while significantly improving performance."}),"\n"]}),"\n"]}),(0,i.jsx)(t.p,{children:"Reducing the number of vertices can help speed up the simulation without sacrificing collision fidelity."})]}),"\n",(0,i.jsxs)(t.p,{children:["Jitter provides a built-in method to simplify the vertex set: ",(0,i.jsx)(t.code,{children:"ShapeHelper.SampleHull"}),".\nThis function samples directions uniformly across the unit sphere and returns the vertices that are furthest away in those directions. These vertices, by definition, lie on the convex hull of the original shape."]}),"\n",(0,i.jsxs)(t.p,{children:["Replace the content of ",(0,i.jsx)(t.code,{children:"Program.cs"})," with the following code:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-cs",metastring:"Program.cs {24,58-61} showLineNumbers",children:'using System.Numerics;\nusing Jitter2.Collision.Shapes;\nusing Jitter2.LinearMath;\nusing Raylib_cs;\nusing static Raylib_cs.Raylib;\n\n// set a hint for anti-aliasing\nSetConfigFlags(ConfigFlags.Msaa4xHint);\n\n// initialize a 1200x800 px window with a title\nInitWindow(1200, 800, "TeaDrop example");\n\n// load the teapot model from a file\nModel teapotModel = LoadModel("teapot.obj");\n\n// Load the mesh vertices\nif (teapotModel.MeshCount == 0)\n    throw new Exception("Model could not be loaded!");\n\nMesh mesh;\nunsafe { mesh = teapotModel.Meshes[0]; }\n\nvar allVertices = mesh.VerticesAs<JVector>().ToArray();\nvar vertices = ShapeHelper.SampleHull(allVertices.ToArray(), 4);\n\n// just for visualization -\n// we will not need to construct the explicit hull for the simulation!\nvar debugHull = ShapeHelper.MakeHull(vertices, 4);\n\n// create a camera\nCamera3D camera = new ()\n{\n    Position = new Vector3(-5.0f, 2.0f, 3.0f),\n    Target = new Vector3(0.0f, 1.0f, 0.0f),\n    Up = new Vector3(0.0f, 1.0f, 0.0f),\n    FovY = 45.0f,\n    Projection = CameraProjection.Perspective\n};\n\n// 100 fps target\nSetTargetFPS(100);\n\n// simple render loop\nwhile (!WindowShouldClose())\n{\n    BeginDrawing();\n    ClearBackground(Color.Blue);\n\n    // make the scene rotate\n    UpdateCamera(ref camera, CameraMode.Orbital);\n\n    BeginMode3D(camera);\n\n    // draw the teapot model\n    DrawModelWires(teapotModel, Vector3.Zero, 1.0f, Color.White);\n\n    // draw the sample vertices of the convex hull\n    foreach (var vertex in vertices)\n    {\n        DrawSphere(vertex, 0.02f, Color.Red);\n    }\n\n    // for debugging: draw the explicit hull\n    foreach (var vertex in debugHull)\n    {\n        DrawLine3D(vertex.V0, vertex.V1, Color.Green);\n        DrawLine3D(vertex.V1, vertex.V2, Color.Green);\n        DrawLine3D(vertex.V2, vertex.V0, Color.Green);\n    }\n\n    EndMode3D();\n    DrawText($"{GetFPS()} fps", 10, 10, 20, Color.White);\n\n    EndDrawing();\n}\n\nCloseWindow();\n'})}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.img,{alt:"plane",src:n(6313).A+"",width:"1199",height:"794"})}),"\n",(0,i.jsx)(t.p,{children:"The teapot's wireframe is drawn in white, the green wireframe shows the convex hull, and the sampled hull vertices are depicted as red dots."})]})}function d(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}},6313:(e,t,n)=>{n.d(t,{A:()=>i});const i=n.p+"assets/images/teapot-11a1c02b4744487f9858db05d9098b53.png"},8453:(e,t,n)=>{n.d(t,{R:()=>s,x:()=>a});var i=n(6540);const r={},o=i.createContext(r);function s(e){const t=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),i.createElement(o.Provider,{value:t},e.children)}}}]);