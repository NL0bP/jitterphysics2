"use strict";(self.webpackChunkjitterphysics=self.webpackChunkjitterphysics||[]).push([[766],{3905:(e,n,t)=>{t.d(n,{Zo:()=>d,kt:()=>g});var r=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=r.createContext({}),c=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},d=function(e){var n=c(e.components);return r.createElement(s.Provider,{value:n},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},f=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),u=c(t),f=o,g=u["".concat(s,".").concat(f)]||u[f]||p[f]||i;return t?r.createElement(g,a(a({ref:n},d),{},{components:t})):r.createElement(g,a({ref:n},d))}));function g(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var i=t.length,a=new Array(i);a[0]=f;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[u]="string"==typeof e?e:o,a[1]=l;for(var c=2;c<i;c++)a[c]=t[c];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}f.displayName="MDXCreateElement"},374:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>a,default:()=>p,frontMatter:()=>i,metadata:()=>l,toc:()=>c});var r=t(7462),o=(t(7294),t(3905));const i={sidebar_position:3},a="Hello World",l={unversionedId:"quickstart/hello-world",id:"quickstart/hello-world",title:"Hello World",description:"We will now add physics to the scene. We do this by creating a new instance of the World class and adding several rigid bodies to it.",source:"@site/docs/01_quickstart/02-hello-world.md",sourceDirName:"01_quickstart",slug:"/quickstart/hello-world",permalink:"/docs/quickstart/hello-world",draft:!1,editUrl:"https://github.com/notgiven688/jitterphysics2/tree/main/docs/docs/01_quickstart/02-hello-world.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Setting Up a Render Loop",permalink:"/docs/quickstart/render-loop"},next:{title:"Documentation",permalink:"/docs/category/documentation"}},s={},c=[],d={toc:c},u="wrapper";function p(e){let{components:n,...i}=e;return(0,o.kt)(u,(0,r.Z)({},d,i,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"hello-world"},"Hello World"),(0,o.kt)("p",null,"We will now add physics to the scene. We do this by creating a new instance of the World class and adding several rigid bodies to it."),(0,o.kt)("p",null,"Replace the content of ",(0,o.kt)("inlineCode",{parentName:"p"},"Program.cs")," with the following code (marked lines indicate the additions to the source code):"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cs",metastring:"Program.cs {3-6,9-18,28,41-62,87-93} showLineNumbers","Program.cs":!0,"{3-6,9-18,28,41-62,87-93}":!0,showLineNumbers:!0},'using System.Numerics;\nusing Raylib_cs;\nusing Jitter2;\nusing Jitter2.Collision.Shapes;\nusing Jitter2.Dynamics;\nusing Jitter2.LinearMath;\nusing static Raylib_cs.Raylib;\n\nstatic Matrix4x4 GetRayLibTransformMatrix(RigidBody body)\n{\n    JMatrix ori = body.Orientation;\n    JVector pos = body.Position;\n\n    return new Matrix4x4(ori.M11, ori.M12, ori.M13, pos.X,\n                         ori.M21, ori.M22, ori.M23, pos.Y,\n                         ori.M31, ori.M32, ori.M33, pos.Z,\n                         0, 0, 0, 1.0f);\n}\n\nstatic Texture2D GenCheckedTexture(int size, int checks, Color colorA, Color colorB)\n{\n    Image imageMag = GenImageChecked(size, size, checks, checks, colorA, colorB);\n    Texture2D textureMag = LoadTextureFromImage(imageMag);\n    UnloadImage(imageMag);\n    return textureMag;\n}\n\nconst int NumberOfBoxes = 12;\n\n// set a hint for anti-aliasing\nSetConfigFlags(ConfigFlags.FLAG_MSAA_4X_HINT);\n\n// initialize a 1200x800 px window with a title\nInitWindow(1200, 800, "BoxDrop example");\n\n// dynamically create a plane model\nTexture2D texture = GenCheckedTexture(10, 1,  Color.LIGHTGRAY, Color.GRAY);\nModel planeModel = LoadModelFromMesh(GenMeshPlane(10, 10, 10, 10));\nSetMaterialTexture(ref planeModel, 0, MaterialMapIndex.MATERIAL_MAP_DIFFUSE, ref texture);\n\n// dynamically create a box model\ntexture = GenCheckedTexture(2, 1,  Color.WHITE, Color.MAGENTA);\nMesh boxMesh = GenMeshCube(1, 1, 1);\nMaterial boxMat = LoadMaterialDefault();\nSetMaterialTexture(ref boxMat, MaterialMapIndex.MATERIAL_MAP_DIFFUSE, texture);\n\n// initialize the Jitter physics world\nWorld world = new ();\n\n// add a body representing the plane\nRigidBody planeBody = world.CreateRigidBody();\nplaneBody.AddShape(new BoxShape(10));\nplaneBody.Position = new JVector(0, -5, 0);\nplaneBody.IsStatic = true;\n\n// add NumberOfBoxes cubes\nfor(int i = 0; i < NumberOfBoxes; i++)\n{\n    RigidBody body = world.CreateRigidBody();\n    body.AddShape(new BoxShape(1));\n    body.Position = new JVector(0, i * 2 + 0.5f, 0);\n}\n\n// create a camera\nCamera3D camera = new ()\n{\n    Position = new Vector3(-20.0f, 8.0f, 10.0f),\n    Target = new Vector3(0.0f, 4.0f, 0.0f),\n    Up = new Vector3(0.0f, 1.0f, 0.0f),\n    FovY = 45.0f,\n    Projection = CameraProjection.CAMERA_PERSPECTIVE\n};\n\n// 100 fps target\nSetTargetFPS(100);\n\n// simple render loop\nwhile (!WindowShouldClose())\n{\n    BeginDrawing();\n    ClearBackground(Color.BLUE);\n\n    BeginMode3D(camera);\n\n    DrawModel(planeModel, Vector3.Zero, 1.0f, Color.WHITE);\n\n    world.Step(1.0f / 100.0f, true);\n\n    foreach(var body in world.RigidBodies)\n    {\n        if(body == planeBody) continue; // do not draw this\n        DrawMesh(boxMesh, boxMat, GetRayLibTransformMatrix(body));\n    }\n\n    EndMode3D();\n    DrawText($"{GetFPS()} fps", 10, 10, 20, Color.WHITE); \n\n    EndDrawing();\n}\n\nCloseWindow();\n')),(0,o.kt)("p",null,"Running your program, you should now see a few boxes dynamically falling onto the ground."),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"plane",src:t(8226).Z,width:"1198",height:"795"})))}p.isMDXComponent=!0},8226:(e,n,t)=>{t.d(n,{Z:()=>r});const r=t.p+"assets/images/raylibjitter-70ae279a0ceb57d513433beed08859bd.gif"}}]);