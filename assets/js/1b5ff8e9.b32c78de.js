"use strict";(self.webpackChunkjitterphysics=self.webpackChunkjitterphysics||[]).push([[80],{3905:(a,e,t)=>{t.d(e,{Zo:()=>c,kt:()=>d});var n=t(7294);function r(a,e,t){return e in a?Object.defineProperty(a,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):a[e]=t,a}function s(a,e){var t=Object.keys(a);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(a);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(a,e).enumerable}))),t.push.apply(t,n)}return t}function o(a){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?s(Object(t),!0).forEach((function(e){r(a,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(a,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(e){Object.defineProperty(a,e,Object.getOwnPropertyDescriptor(t,e))}))}return a}function p(a,e){if(null==a)return{};var t,n,r=function(a,e){if(null==a)return{};var t,n,r={},s=Object.keys(a);for(n=0;n<s.length;n++)t=s[n],e.indexOf(t)>=0||(r[t]=a[t]);return r}(a,e);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(a);for(n=0;n<s.length;n++)t=s[n],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(a,t)&&(r[t]=a[t])}return r}var m=n.createContext({}),i=function(a){var e=n.useContext(m),t=e;return a&&(t="function"==typeof a?a(e):o(o({},e),a)),t},c=function(a){var e=i(a.components);return n.createElement(m.Provider,{value:e},a.children)},l="mdxType",u={inlineCode:"code",wrapper:function(a){var e=a.children;return n.createElement(n.Fragment,{},e)}},N=n.forwardRef((function(a,e){var t=a.components,r=a.mdxType,s=a.originalType,m=a.parentName,c=p(a,["components","mdxType","originalType","parentName"]),l=i(t),N=r,d=l["".concat(m,".").concat(N)]||l[N]||u[N]||s;return t?n.createElement(d,o(o({ref:e},c),{},{components:t})):n.createElement(d,o({ref:e},c))}));function d(a,e){var t=arguments,r=e&&e.mdxType;if("string"==typeof a||r){var s=t.length,o=new Array(s);o[0]=N;var p={};for(var m in e)hasOwnProperty.call(e,m)&&(p[m]=e[m]);p.originalType=a,p[l]="string"==typeof a?a:r,o[1]=p;for(var i=2;i<s;i++)o[i]=t[i];return n.createElement.apply(null,o)}return n.createElement.apply(null,t)}N.displayName="MDXCreateElement"},9291:(a,e,t)=>{t.r(e),t.d(e,{assets:()=>m,contentTitle:()=>o,default:()=>u,frontMatter:()=>s,metadata:()=>p,toc:()=>i});var n=t(7462),r=(t(7294),t(3905));const s={},o="Ray Casting",p={unversionedId:"documentation/03raycasting",id:"documentation/03raycasting",title:"Ray Casting",description:"Retrieve information about where a ray, defined by an origin and a direction, hits a target. Generally, the actual hit point can be calculated using the fraction value returned by the appropriate functions using the formula:",source:"@site/docs/02_documentation/03raycasting.md",sourceDirName:"02_documentation",slug:"/documentation/03raycasting",permalink:"/docs/documentation/03raycasting",draft:!1,editUrl:"https://github.com/notgiven688/jitterphysics2/tree/main/docs/docs/02_documentation/03raycasting.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Simulation Step",permalink:"/docs/documentation/02simulation-step"},next:{title:"Contact Generation",permalink:"/docs/documentation/04contact-generation"}},m={},i=[{value:"Generic Ray Cast for ISupportMap",id:"generic-ray-cast-for-isupportmap",level:2},{value:"Ray Cast Against Shapes",id:"ray-cast-against-shapes",level:2}],c={toc:i},l="wrapper";function u(a){let{components:e,...t}=a;return(0,r.kt)(l,(0,n.Z)({},c,t,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"ray-casting"},"Ray Casting"),(0,r.kt)("p",null,"Retrieve information about where a ray, defined by an origin and a direction, hits a target. Generally, the actual hit point can be calculated using the fraction value returned by the appropriate functions using the formula:"),(0,r.kt)("div",{className:"math math-display"},(0,r.kt)("span",{parentName:"div",className:"katex-display"},(0,r.kt)("span",{parentName:"span",className:"katex"},(0,r.kt)("span",{parentName:"span",className:"katex-mathml"},(0,r.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML",display:"block"},(0,r.kt)("semantics",{parentName:"math"},(0,r.kt)("mrow",{parentName:"semantics"},(0,r.kt)("mtext",{parentName:"mrow",mathvariant:"bold"},"hit"),(0,r.kt)("mo",{parentName:"mrow"},"="),(0,r.kt)("mtext",{parentName:"mrow",mathvariant:"bold"},"origin"),(0,r.kt)("mo",{parentName:"mrow"},"+"),(0,r.kt)("mtext",{parentName:"mrow"},"fraction"),(0,r.kt)("mo",{parentName:"mrow"},"\xd7"),(0,r.kt)("mtext",{parentName:"mrow",mathvariant:"bold"},"direction"),(0,r.kt)("mo",{parentName:"mrow",separator:"true"},","),(0,r.kt)("mspace",{parentName:"mrow",width:"1em"}),(0,r.kt)("mtext",{parentName:"mrow"},"with\xa0fraction"),(0,r.kt)("mo",{parentName:"mrow"},"\u2208"),(0,r.kt)("mo",{parentName:"mrow",stretchy:"false"},"["),(0,r.kt)("mn",{parentName:"mrow"},"0"),(0,r.kt)("mo",{parentName:"mrow",separator:"true"},","),(0,r.kt)("mi",{parentName:"mrow",mathvariant:"normal"},"\u221e"),(0,r.kt)("mo",{parentName:"mrow",stretchy:"false"},")"),(0,r.kt)("mi",{parentName:"mrow",mathvariant:"normal"},".")),(0,r.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"\\textbf{hit} = \\textbf{origin} + \\textrm{fraction} \\times \\textbf{direction}, \\quad \\textrm{with fraction} \\in [0,\\infty).")))),(0,r.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"0.6944em"}}),(0,r.kt)("span",{parentName:"span",className:"mord text"},(0,r.kt)("span",{parentName:"span",className:"mord textbf"},"hit")),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}}),(0,r.kt)("span",{parentName:"span",className:"mrel"},"="),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}})),(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"0.8889em",verticalAlign:"-0.1944em"}}),(0,r.kt)("span",{parentName:"span",className:"mord text"},(0,r.kt)("span",{parentName:"span",className:"mord textbf"},"origin")),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222em"}}),(0,r.kt)("span",{parentName:"span",className:"mbin"},"+"),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222em"}})),(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"0.7778em",verticalAlign:"-0.0833em"}}),(0,r.kt)("span",{parentName:"span",className:"mord text"},(0,r.kt)("span",{parentName:"span",className:"mord textrm"},"fraction")),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222em"}}),(0,r.kt)("span",{parentName:"span",className:"mbin"},"\xd7"),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222em"}})),(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"0.8889em",verticalAlign:"-0.1944em"}}),(0,r.kt)("span",{parentName:"span",className:"mord text"},(0,r.kt)("span",{parentName:"span",className:"mord textbf"},"direction")),(0,r.kt)("span",{parentName:"span",className:"mpunct"},","),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"1em"}}),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.1667em"}}),(0,r.kt)("span",{parentName:"span",className:"mord text"},(0,r.kt)("span",{parentName:"span",className:"mord textrm"},"with\xa0fraction")),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}}),(0,r.kt)("span",{parentName:"span",className:"mrel"},"\u2208"),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2778em"}})),(0,r.kt)("span",{parentName:"span",className:"base"},(0,r.kt)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),(0,r.kt)("span",{parentName:"span",className:"mopen"},"["),(0,r.kt)("span",{parentName:"span",className:"mord"},"0"),(0,r.kt)("span",{parentName:"span",className:"mpunct"},","),(0,r.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.1667em"}}),(0,r.kt)("span",{parentName:"span",className:"mord"},"\u221e"),(0,r.kt)("span",{parentName:"span",className:"mclose"},")"),(0,r.kt)("span",{parentName:"span",className:"mord"},".")))))),(0,r.kt)("p",null,"The direction given to Jitter does not need to be normalized. The normal returned by Jitter is the normalized surface normal of the collision target at the hit point."),(0,r.kt)("h2",{id:"generic-ray-cast-for-isupportmap"},"Generic Ray Cast for ISupportMap"),(0,r.kt)("p",null,"To cast a ray against any object implementing ",(0,r.kt)("inlineCode",{parentName:"p"},"ISupportMap"),", use ",(0,r.kt)("inlineCode",{parentName:"p"},"NarrowPhase.RayCast"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cs"},"public static bool RayCast(ISupportMap support, \n                           ref JMatrix orientation, ref JVector position,\n                           ref JVector origin, ref JVector direction, \n                           out float fraction, out JVector normal)\n")),(0,r.kt)("h2",{id:"ray-cast-against-shapes"},"Ray Cast Against Shapes"),(0,r.kt)("p",null,"The world class offers two ray cast methods:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cs"},"public bool RayCast(Shape shape, JVector origin, JVector direction,\n                    out JVector normal, out float fraction)\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cs"},"public bool RayCast(JVector origin, JVector direction, \n                    RayCastFilterPre? pre, RayCastFilterPost? post,\n                    out Shape? shape, out JVector normal, out float fraction)\n")),(0,r.kt)("p",null,"The first method can be used to cast a ray against a single shape. The second method tests a ray against the world. Use the ray cast filter to get information about possible candidates or to avoid collision with specific shapes entirely. For example, a bullet may always be able to penetrate a wall; the pre-filter can be used to discard any collision with the wall. For a wall with non-uniform thickness, the bullet may only be able to penetrate the thinner part. In this case, the post-filter can be used to get information on where the ray hit the wall and, based on that information, decide whether to drop the collision."))}u.isMDXComponent=!0}}]);