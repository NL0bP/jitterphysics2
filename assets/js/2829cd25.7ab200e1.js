"use strict";(self.webpackChunkjitterphysics=self.webpackChunkjitterphysics||[]).push([[72],{9063:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>r,default:()=>p,frontMatter:()=>a,metadata:()=>i,toc:()=>d});var s=n(4848),o=n(8453);const a={sidebar_position:1},r="Project Setup",i={id:"quickstart/teapots/project-setup",title:"Project Setup",description:"In the previous section, we created a simulation of falling boxes. Jitter includes several default shapes, such as capsules, cylinders, and spheres.",source:"@site/docs/01_quickstart/02_teapots/00-project-setup.md",sourceDirName:"01_quickstart/02_teapots",slug:"/quickstart/teapots/project-setup",permalink:"/docs/quickstart/teapots/project-setup",draft:!1,unlisted:!1,editUrl:"https://github.com/notgiven688/jitterphysics2/tree/main/docs/docs/01_quickstart/02_teapots/00-project-setup.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Dropping Teapots",permalink:"/docs/category/dropping-teapots"},next:{title:"Hull Sampling",permalink:"/docs/quickstart/teapots/hull-sampling"}},c={},d=[{value:"Requirements",id:"requirements",level:3},{value:"Create a New Console Application and Add Jitter and Raylib",id:"create-a-new-console-application-and-add-jitter-and-raylib",level:3}];function l(e){const t={a:"a",code:"code",em:"em",h1:"h1",h3:"h3",header:"header",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"project-setup",children:"Project Setup"})}),"\n",(0,s.jsx)(t.p,{children:"In the previous section, we created a simulation of falling boxes. Jitter includes several default shapes, such as capsules, cylinders, and spheres.\nThese shapes can be transformed and/or combined, and they are already sufficient to represent many types of collidable entities."}),"\n",(0,s.jsxs)(t.p,{children:["In this section, we will add a custom convex shape to the simulation\u2014specifically, the famous ",(0,s.jsx)(t.em,{children:"Utah teapot"}),". We'll construct this shape from its visual representation by loading a ",(0,s.jsx)(t.code,{children:"teapot.obj"})," file and using its vertices to create the convex shape."]}),"\n",(0,s.jsx)(t.h3,{id:"requirements",children:"Requirements"}),"\n",(0,s.jsxs)(t.p,{children:["Install the ",(0,s.jsx)(t.a,{href:"https://dotnet.microsoft.com/download/dotnet/9.0",children:".NET 9.0 SDK"}),"."]}),"\n",(0,s.jsx)(t.p,{children:"Ensure that dotnet is correctly set up by executing the following command:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-sh",children:"dotnet --version\n"})}),"\n",(0,s.jsx)(t.h3,{id:"create-a-new-console-application-and-add-jitter-and-raylib",children:"Create a New Console Application and Add Jitter and Raylib"}),"\n",(0,s.jsx)(t.p,{children:'First, create a new directory named "TeaDrop" and navigate into it:'}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-sh",children:"mkdir TeaDrop && cd TeaDrop\n"})}),"\n",(0,s.jsxs)(t.p,{children:["Download and unzip the ",(0,s.jsx)(t.a,{href:"ahttps://github.com/notgiven688/jitterphysics2/raw/refs/heads/main/src/JitterDemo/assets/teapot.obj.zip",children:"teapot.obj"})," model."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-sh",children:"wget https://github.com/notgiven688/jitterphysics2/raw/refs/heads/main/src/JitterDemo/assets/teapot.obj.zip\nunzip teapot.obj.zip\n"})}),"\n",(0,s.jsx)(t.p,{children:"Next, create a new console application in this directory and add Raylib-cs and Jitter2:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-sh",children:"dotnet new console\ndotnet add package Raylib-cs --version 6.1.1\ndotnet add package Jitter2\n"})}),"\n",(0,s.jsxs)(t.p,{children:["Add the following code to ",(0,s.jsx)(t.code,{children:"TeaDrop.csproj"})," to allow unsafe code, and to copy teapot.obj automatically to the output directory:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-xml",children:'  <PropertyGroup>\n    <AllowUnsafeBlocks>true</AllowUnsafeBlocks>\n  </PropertyGroup>\n\n  <ItemGroup>\n    <None Update="teapot.obj">\n      <CopyToOutputDirectory>Always</CopyToOutputDirectory>\n    </None>\n  </ItemGroup>\n'})}),"\n",(0,s.jsx)(t.p,{children:"You have completed the setup. If you now execute the following command:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-sh",children:"dotnet run\n"})}),"\n",(0,s.jsx)(t.p,{children:'Your console should display: "Hello, World!".'})]})}function p(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>i});var s=n(6540);const o={},a=s.createContext(o);function r(e){const t=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),s.createElement(a.Provider,{value:t},e.children)}}}]);